/** Lexical Tokenizer
 * @author Jonie Francis R. Tan
 * 
 * Goal:    1) Crate an array using the link list generated by LexList.class.
 *          2) Update the link list's scope values by checking the nesting depth of "{" and "}"
 *              - using LexList.UpdateScope();
 * 
 * 
 * Notes:
 *      - One linked list is equivalent to one line of code.
 *      - Array represents the whole document
 * 
 *  1) Value
 *  2) Data Type
 *  3) Statement Type (Statement or Assignment)
 *  4) Scope
 *      -   Scope has been addressed by counting its nesting depth
 *          and assigning a unique section ID. Integer, Starts at 0.
 *   
 *  Output:
 *      an array containing the Linked Lists that contains the previous information.
 */

package compiler_design_logic;

import java.util.ArrayList;
import java.util.List;

public class LexArray {
    public List<LinkList> LexArrayOutput = new ArrayList<>();
    
    public LinkList[] main(String[] input){
        LinkList LL_Catcher;
        int LL_Array_ctr=0;
                
        
        for(int i=0; i<input.length; i++){
            System.out.println(input[i]);
            LexArrayOutput.add(LexList.main(input[i]));
            LL_Array_ctr++;
        }
        LinkList[] LexArrayFinal = new LinkList[LL_Array_ctr];
        
        for(int i=0; i < LL_Array_ctr ; i++){
            LexArrayFinal[i] = LexArrayOutput.get(i);
        }
        
        ScopeFinder(LexArrayFinal);
        StatementUpdater(LexArrayFinal);
        
        for(int i=0; i<LexArrayFinal.length; i++){
            System.out.println("Line Number " + i);
            LexArrayFinal[i].printList();
        }

        return LexArrayFinal;
    }

    public static void StatementUpdater(LinkList[] LexArrayFinal){
        String lastType;
        
        for(int i=0; i < LexArrayFinal.length; i++){
            for(Link TempLink = LexArrayFinal[i].getList().nextLink; TempLink != null; TempLink = TempLink.nextLink){
                if(TempLink.value.equals("IF")){
                    lastType = "IF";
                LexArrayFinal[i].UpdateStatement(TempLink.index, lastType);

                }
                    
                System.out.println(TempLink.value);

                
            }
        }
    }
    
    public static void ScopeFinder(LinkList[] LexArrayFinal){
        List<Integer> Scope = new ArrayList<>();    
        /* Scope array will be used to determine the depth of the nesting "{" using "}"
         * Each index corresponds to the line number of the input file
         * Value of each array is used to uniquely identify the different sections
         * with the same nesting depth.
         * Scope[i] increments whenever "}" is encountered at nesting depth of [i].
         */
       
        Scope.add(0);
        int current_depth = 0;
        int next_section = 0;
        String lastType = "Statement";
        
        for(int i=0; i < LexArrayFinal.length; i++){
            for(Link TempLink = LexArrayFinal[i].getList().nextLink; TempLink != null; TempLink = TempLink.nextLink){
                // Checks Scope                
                if(TempLink.value.equals("{")){
                    //brace found, meaning deeper nest level
                    current_depth++;
                    try{
                        Scope.set(current_depth, Scope.get(current_depth) + 1);
                        System.out.println("Trying to insert into 2");
                    }
                    catch (Exception e){
                        Scope.add(0);
                    }               
                    
                }                
                else if(TempLink.value.equals("}")){
                    LexArrayFinal[i].UpdateScope(TempLink.index, current_depth);
                    current_depth--;
                    Scope.set(current_depth, Scope.get(current_depth));
                    lastType = "Statement";
                }
                LexArrayFinal[i].UpdateScope(TempLink.index, current_depth);
            }
            
            
        }
        
        System.out.println(Scope.get(0));
        System.out.println(Scope.get(1));

        //      System.out.println(Scope.get(1));

        
        
        //tries up update current rank
/*          try{
                Scope.set(2, Scope.get(2)+1);
                System.out.println("Trying to insert into 2");
        
            }
        catch (Exception e){
                int inc = Scope.get(0)+1;
                Scope.add(inc);
                current_depth++;
        };
                
        System.out.println(Scope.get(0));
        System.out.println(Scope.get(1));*/
//        System.out.println(Scope.get(2));
//        System.out.println(Scope.get(3));
        
        /*
        for(int i=0; i < LexArrayFinal.length; i++){
            if(LexArrayFinal[i].getList().value.equals("{")){
                System.out.println("OpenBraceFound!"+LexArrayFinal[i].getList().value);
            };
        }
            
        Scope.add(1);
        Scope.get(0);
        System.out.println(Scope.get(0));
        Scope.set(0, 3);
        System.out.println(Scope.get(0));
         */       
        
        Link hello;
    }
    
}
